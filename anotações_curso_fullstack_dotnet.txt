##### COMANDOS DOTNET CONSOLE #####

dotnet -h: exibe os comando que podem ser utilizados no terminal apos a instalação do framework
dotnet new -h: exibe os comandos para a criação do projeot
dotnet new console exemplo_criação: cria um projeto do tipo console
dotnet run: executa a aplicação
dotnet restore: restaura as dependencias do projetodotnet new classlib -n Game.lib: cria um projeto do tipo bibliotecas de classe
dotnet new sln -n GameTop: Cria a solução do projeto
dotnet add GameTop/GameTop.csproj reference .\GameTop.Lib\GameTop.lib.csproj: referencia os projetos criados dentro da solução
dotnet sln GameTop.sln add .\GameTop\GameTop.csproj .\GameTop.lib\GameTop.lib.csproj
dotnet run --project GameTop\GameTop.csproj: Informa qual é o projeto que eu desejo executar dentro da solução
dotnet rebuild: limpa todas as DLL's e recria elas novamente
dotnet watch run: O programa fica em execução e assite as alterações feitas em codigo
dotnet new web -n ProAgil.Web: Cria um projeto web
dotnet new mvc -n ProAgil.Mvc: Cria um projeto mvc
dotnet new webapi -n ProAgil.API: Cria um projeto api
dotnet --version: mostra a versão do SDK que esta sendo utilizado
dotnet --list-sdks: mostra todas as sdks instaladas no computador
dotnet ef: traz uma lista de opções e commandos - dotnet ef [options] [command]
dotnet ef migrations add initry key: para fazer a primeira migração se usa o primeiro comando que ira criar o diretorio das migrations


@installed: exibe todas as extensões instaladas

##### COMANDOS VISUAL STUDIO #####

ctrl + ponto: exibe as bibliotecas ou dependencia para serem instaladas
alt + click: multiplos cursores
ctrl + P:  exibe a linha do erro
ctrl + D + D: abre a variavel declarada me todo lugar da pagina para edição
ctrl + k + d - Atalho para identar o codigo
ctrl + M + O = colapsa codigo e metodos
Ctrl + Shif + p no gerenciador de pacotes Nuget e digitar o comando Microsoft.EntityFrameworkCore.Sqlite na versão 2.2.0


A coleção de projetos criado é uma solução


## Subindo o projeto para um repositorio do Github

1 - Criar o reopsitorio no github
2 - No projeto criar o arquivo .gitignore para adicionar os arquivos que não serão feitos commit, adicionar os dois comandos "bin e obj"
3 - Criar o arquivo README.md



Obajetos recionais com entity framework


quando é feito o mapeamento das classes de model, a variavel que se chama id será associada pelo entity como Primary key

Criação e trabalhando com o projeto Angular

No mesmo diretorio criar um projeto Angular

ng new nome_projeto

OBS: Caso haja erro na criação do projeto remova ng.ps1 do diretório C:\Users\%username%\AppData\Roaming\npm\e tente limpar o cache npm emC:\Users\%username%\AppData\Roaming\npm-cache\

ng serve -o: executa o projeto e abre no browser

editor.config: Configura o editor de texto, como espaçamantos, intervalos entre outros
angular.js: arquivo de configuração de projeto angular
package.json: possui todas as dependencias instaladas o que serve como facilidado no clone do projeto para que seja instaladas todas as dependencias no node_modules


Instalar os frameworks de JavaScript e CSS: npm install --save bootstrap @fortawesome/fontawesome-free


	Na classe de controller, onde é definido a rota de execução da aplicação, quando é criado mu projeto do tipo api a rota vem com a descriçãoapi/controller
isso pode ser alterado para o tipo de aplicaçao que você deseja executar, por exemplo, para site/controller, ai tem que rodar com o dotnet watch run


Para rodar as migrations é necessario instalar o pacote de banco de dados, no caso com o comando ctrl + shift + p:
Pacote: Microsoft.EntityFrameworkCore.Sqlite (Ou o gerenciador de banco de dados que for melhor)
Versão: 2.2.0

E referenciar em qual projeto você quer adicionar a dependencia, no caso dessa solução será na solução repositorio

Entrar dentro do repositorio e dar o comando dotnet ef para listar os comando disponiveis
dotnet ef --startup-project ..\ProAgil.WebAPI\ migrations add init -> para definir o projeto que ira ser gravado as migrações
dotnet ef --startup-project ..\ProAgil.WebAPI\ database update -> Pega as migrations e cria o banco de dados


Aula 48
- Quando se deseja criar uma chave estrangeira tem que se criar dois campos, um com o nome da entidade e outro com o nome da entidade teminando com id para deixar explicito que 
esta sendo criado um identificador da entidade declarada abaixo
- protected override void OnModelCreating = // especificando a relação de n para n e definindo quais são os identificadores

Aula 50
- Metodos da interface void Add<T>(T entity) where T: class --> tipo generico onde o T generico sera uma classe

Aula 52
- IQueryable<> = Cria uma query que 
- Toda consulta que ira retornar os dados somente de um registro usar o FirstOrDefaultAsync(), pois ele retornará o primeiro de forma assincrona

Aula 54
- Toda vez em que uma controller requisita o contexto, com o addScoped é requisitado a interface de repositorio

Aula 56
- AsNoTracking(): Especifica que não trave o recurso para que ele seja retornado
- this._context.ChangeTracker.QueryTrackingBehavior = QueryTrackingBehavior.NoTracking - não travar o ambiente de consulta rastreavel

Aula 85
- Criar e mudar de branch: git checkout -b nomedabranch
- @Injectable: 

Aula 59
- @Injectable({ providedIn: 'root' }) - metadado, permite o uso do componente em toda a aplicação, injetar em outros componentes
- providers: [] - Permite que o componente seja usado por toda a aplicação
- observable - 

Aula 63
- criar pipe, botão direto e generate pipe
- DatePipe: herança informada na classe para trabalhar com o pipe de data - extends
- add no app.module em declarations a classe DateTimeFormatPipePipe

Aula 64
- BsDropdownModule.forRoute() - Define que a importação desse modulo pode ser usada na a
- Instalação do ngx bootstrap, instala~çao e uso dos componentes
- add os imports do aap.component os imports para a aplicação inteira com o BsDropdownModule.forRoute()



































































































































































